#!/usr/bin/env python
"""
Copyright (C) Jeremy Breiding, Inc - All Rights Reserved
Unauthorized copying of this file, via any medium is strictly prohibited
Proprietary and confidential
Written by Jeremy Breiding jbreiding@hotmail.com, 2016
"""
import yaml
import os
import argparse

from collections import Counter
from datetime import datetime, timedelta
from jinja2 import Template


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate pages for consumption by pelican static "
        "website generator.")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--teams", action="store_true",
        help="Generate page for rosters from data/teams.yaml and "
        "data/season.yaml")
    group.add_argument(
        "--schedule", action="store_true",
        help="Generate full season of schedules from data/teams.yaml "
        "and data/season.yaml")
    group.add_argument(
        "--standings", action="store_true",
        help="Generate page for standings using generated schedules and"
        " teams.yaml")

    return parser.parse_args()


def read_yaml(path):
    teams = yaml.load(open(os.path.join(os.getcwd(), "data", path)).read())
    return teams


def write_yaml(path, data):
    with open(os.path.join(os.getcwd(), "data", path), 'w') as yamlr:
        yamlr.writelines(yaml.dump(data))


def get_template(name):
    return Template(open(os.path.join("data", name)).read())


def create_games(list, games_per_season):
    """ Create a schedule for the teams in the list and return it"""
    s = []

    counter = 0
    while(len(s) != games_per_season):
        mid = len(list) / 2
        l1 = list[:mid]
        l2 = list[mid:]
        l2.reverse()

        if (len(list) % 2) != 0:
            l2.pop()

        last_go = (len(s) + len(l1)) > games_per_season

        if last_go:
            left_over = (len(s) + len(l1)) - games_per_season + 1
            s.extend(zip(l1, l2)[:left_over])
            return s
        # Switch sides after each round
        if(counter % 2 == 1):
            s.extend(zip(l1, l2))
        else:
            s.extend(zip(l2, l1))

        list.insert(1, list.pop())
        counter += 1

    return s


def create_schedule():
    if os.path.exists(os.path.join(os.getcwd(), 'data', 'schedule.yaml')):
        return

    season = read_yaml('season.yaml')
    times = season['times']
    games_per_season = (season['games_per_court'] *
                        season['courts_per_night'] *
                        (season['nights_per_season']))

    game_nights = {}
    for division in read_yaml('teams.yaml'):
        game_night = None
        start_date = datetime.strptime(season['startdate'], '%Y-%m-%d').date()

        for idx, round in enumerate(create_games(division['teams'],
                                    games_per_season)):
            if not game_night:
                night = (idx / len(times)) + 1
                game_night = {'division': division['division'],
                              'night': night,
                              'date': start_date,
                              'games': []}

            game_night['games'] += [{'court': division['courts'][0],
                                     'time': times[idx % len(times)],
                                     'home': round[0]['name'],
                                     'away': round[1]['name'],
                                     'winner': ''}]
            division['courts'].reverse()

            if len(game_night['games']) == len(times):
                if game_night['night'] not in game_nights:
                    game_nights[game_night['night']] = []

                game_nights[game_night['night']].extend([game_night])
                start_date += timedelta(days=7)
                game_night = None

    write_yaml('schedule.yaml', game_nights)


def generate_schedule():
    season = read_yaml('season.yaml')
    create_schedule()
    game_nights = read_yaml('schedule.yaml')

    season_dir = os.path.join(os.getcwd(), 'content',
                              "%s-%d" % (season['season'], season['year']))

    regular_md = os.path.join(season_dir, "regular.md")
    template = get_template('regular.templ')

    with open(regular_md, 'w') as regular_file:
        regular_file.write(template.render(year=season['year'],
                                           season=season['season'],
                                           nights=game_nights,
                                           date=datetime.strptime(season['startdate'], '%Y-%m-%d').date()))


def generate_teams():
    season = read_yaml('season.yaml')
    teams = read_yaml('teams.yaml')

    pages_dir = os.path.join(os.getcwd(), 'content', "%s-%d" % (season['season'], season['year']))
    if not os.path.exists(pages_dir):
        os.makedirs(pages_dir)

    one_week = timedelta(days=7)
    start_date = (datetime.strptime(season['startdate'], '%Y-%m-%d')
                  .date() - one_week)

    template = get_template('teams.templ')
    pages_dir = os.path.join(pages_dir, "roster.md")
    with open(pages_dir, 'w+') as night_file:
        night_file.write(template.render(team_list=teams,
                                         year=season['year'],
                                         season=season['season'],
                                         date=start_date))


def generate_standings():
    generate_schedule()
    season = read_yaml('season.yaml')
    divisions = read_yaml('teams.yaml')
    schedule = read_yaml('schedule.yaml')

    season_dir = os.path.join(os.getcwd(), 'content',
                              "%s-%d" % (season['season'], season['year']))

    standings = {
        'winners': Counter(),
        'losers': Counter(),
        'ties': Counter()}

    for key, night in schedule.iteritems():
        for division in night:
            if division['date'] >= datetime.now().date():
                break

            for game in division['games']:
                if game['winner'] == 'h':
                    standings['winners'].update([game['home']])
                    standings['losers'].update([game['away']])
                elif game['winner'] == 'a':
                    standings['winners'].update([game['away']])
                    standings['losers'].update([game['home']])
                else:
                    standings['ties'].update([game['away'], game['home']])

    sorted_divisions = []
    for division in divisions:
        for team in division['teams']:
            team['wins'] = standings['winners'][team['name']]
            team['losses'] = standings['losers'][team['name']]
            team['ties'] = standings['ties'][team['name']]
            team['points'] = team['wins'] * 2 + team['ties']

        division['teams'] = sorted(division['teams'],
                                   key=lambda team: team['points'],
                                   reverse=True)
        sorted_divisions.append(division)

    standings_template = get_template('standings.templ')
    standings_dir = os.path.join(season_dir, "standings.md")

    write_yaml('standings.yaml', sorted_divisions)

    with open(standings_dir, 'w+') as standing_file:
        standing_file.write(standings_template.render(team_list=sorted_divisions,
                                                      year=season['year'],
                                                      season=season['season'],
                                                      date=str(datetime.now().date())))

    playoff_date = (datetime.strptime(season['startdate'], '%Y-%m-%d').date() +
                    timedelta(weeks=(season['nights_per_season'] + season['holiday_weeks'])))

    if datetime.now().date() > playoff_date - timedelta(weeks=1):
        generate_playoffs()


def generate_playoffs():
    season = read_yaml('season.yaml')
    season_dir = os.path.join(os.getcwd(), 'content',
                              "%s-%d" % (season['season'], season['year']))
    create_playoffs()
    playoffs = read_yaml('playoffs.yaml')

    playoff_template = get_template('playoff.templ')
    playoffdir = os.path.join(season_dir, "playoffs.md")

    playoff_date = datetime.strptime(season['startdate'], '%Y-%m-%d').date() + timedelta(weeks=(season['nights_per_season'] + season['holiday_weeks']))

    with open(playoffdir, 'w+') as playoff_file:
        playoff_file.write(playoff_template.render(divisions=playoffs,
                                                   year=season['year'],
                                                   season=season['season'],
                                                   date=playoff_date,
                                                   game_date=playoff_date))


def create_playoffs():
    if os.path.exists(os.path.join(os.getcwd(), 'data', 'playoffs.yaml')):
        return

    sorted_divisions = read_yaml('standings.yaml')

    def divide(arr, depth, m):
        if len(complements) <= depth:
            complements.append(2 ** (depth + 2) + 1)
        complement = complements[depth]
        for i in range(2):
            if complement - arr[i] <= m:
                arr[i] = [arr[i], complement - arr[i]]
                divide(arr[i], depth + 1, m)

    playoff_games = []

    for sorted_division in sorted_divisions:
        bracket = {}
        bracket['division'] = sorted_division['division']

        m = len(sorted_division['teams'])

        arr = [1, 2]
        complements = []

        divide(arr, 0, m)

        games = []
        times = read_yaml('season.yaml')['times']
        courts = sorted_division['courts']

        for bracket in arr:
            for match in bracket:
                games.append((sorted_division['teams'][match[0]-1]['name'],
                              sorted_division['teams'][match[1]-1]['name']))

        for x in xrange(0, len(games), 2):
            games.append(("Winner of %s" % str(games[x]), "Winner of %s" % str(games[x+1])))

        games.append(("Finals", "Finals"))
        playoffs = []
        for idx, game in enumerate(games):
            playoffs.append({"time": times[idx % len(times)],
                             "court": courts[idx % len(courts)],
                             "home": game[0],
                             "away": game[1]})

        bracket['games'] = playoffs
        playoff_games.append(bracket)

    write_yaml('playoffs.yaml', playoff_games)


def main():
    args = parse_args()

    if args.schedule:
        generate_schedule()
    elif args.teams:
        generate_teams()
    elif args.standings:
        generate_standings()


if __name__ == "__main__":
    main()
